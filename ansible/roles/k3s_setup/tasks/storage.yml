# ---
# - name: "Get disk alignment for disks"
#   shell: |
#     if
#       [[ -e /sys/block/{{ storage_disk }}/queue/optimal_io_size && -e /sys/block/{{ storage_disk }}/alignment_offset && -e /sys/block/{{ storage_disk }}/queue/physical_block_size ]];
#     then
#       echo $[$(( ($(cat /sys/block/{{ storage_disk }}/queue/optimal_io_size) + $(cat /sys/block/{{ storage_disk }}/alignment_offset)) / $(cat /sys/block/{{ storage_disk }}/queue/physical_block_size) )) | 2048];
#     else
#       echo 2048;
#     fi
#   args:
#     executable: "/bin/bash"
#   register: disk_offset
# - name: "Partition storage disk"
#   shell: |
#     if
#         [ -b /dev/{{ storage_disk }} ]
#     then
#         [ -b /dev/{{ storage_disk_part | default(storage_disk + "1") }} ] || parted -a optimal --script "/dev/{{ storage_disk }}" mklabel gpt mkpart primary {{ disk_offset.stdout|default("2048") }}s 100% && sleep 5 && partprobe /dev/{{ storage_disk }}; sleep 5
#     fi
#   args:
#     executable: "/bin/bash"
# - name: "Create filesystem on the volume"
#   community.general.filesystem:
#     dev: '/dev/{{ storage_disk_part | default(storage_disk + "1") }}'
#     force: "no"
#     fstype: "{{ storage_filesystem }}"
# - name: "Ensure the mount directory exists"
#   file:
#     path: "{{ storage_mountpoint }}"
#     owner: "root"
#     group: "root"
#     state: directory
# - name: "Get UUID for volume"
#   command: 'blkid -s UUID -o value /dev/{{ storage_disk_part | default(storage_disk + "1") }}'
#   register: disk_blkid
#   changed_when: false
#   check_mode: false
# - name: "Mount additional disk"
#   mount:
#     path: "{{ storage_mountpoint }}"
#     fstype: "{{ storage_filesystem }}"
#     passno: "0"
#     src: "UUID={{ disk_blkid.stdout }}"
#     state: "mounted"
# - name: "Ensure the permissions are set correctly"
#   file:
#     path: "{{ storage_mountpoint }}"
#     owner: "root"
#     group: "root"
#     mode: "0755"
#     state: directory
